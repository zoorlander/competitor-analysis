"""–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç—á–µ—Ç–æ–≤ –ø–æ –∞–Ω–∞–ª–∏–∑—É –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤"""

import asyncio
import json
from datetime import datetime
from pathlib import Path
from typing import Dict, Any


class ReportGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö"""
    
    def __init__(self, config: Dict[str, Any]):
        self.config = config
        self.format = config.get('format', 'html')
        self.language = config.get('language', 'ru')
    
    async def generate_report(self, analysis_data: Dict[str, Any], output_dir: str):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
        output_path = Path(output_dir)
        output_path.mkdir(parents=True, exist_ok=True)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç—ã –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
        if self.format == 'html':
            await self._generate_html_report(analysis_data, output_path)
        
        await self._generate_json_report(analysis_data, output_path)
        await self._generate_summary(analysis_data, output_path)
    
    async def _generate_html_report(self, data: Dict, output_path: Path):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML –æ—Ç—á–µ—Ç–∞"""
        
        company_name = data.get('company', 'Unknown')
        timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        
        html_content = f"""
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞: {company_name}</title>
    <style>
        body {{ font-family: Arial, sans-serif; margin: 40px; line-height: 1.6; }}
        .header {{ background: #f4f4f4; padding: 20px; border-radius: 5px; }}
        .section {{ margin: 30px 0; padding: 20px; border-left: 4px solid #007acc; }}
        .metric {{ background: #f9f9f9; padding: 10px; margin: 10px 0; border-radius: 3px; }}
        .recommendation {{ background: #e8f5e8; padding: 15px; margin: 10px 0; border-radius: 5px; }}
        table {{ width: 100%; border-collapse: collapse; margin: 20px 0; }}
        th, td {{ padding: 12px; text-align: left; border-bottom: 1px solid #ddd; }}
        th {{ background-color: #f2f2f2; }}
    </style>
</head>
<body>
    <div class="header">
        <h1>üîç –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞: {company_name}</h1>
        <p><strong>–î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞:</strong> {timestamp}</p>
    </div>
    
    <div class="section">
        <h2>üìä –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏</h2>
        {self._format_website_metrics(data.get('website_data', {}))}
        {self._format_social_metrics(data.get('social_data', {}))}
    </div>
    
    <div class="section">
        <h2>üéØ –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞</h2>
        {self._format_content_analysis(data.get('content_analysis', {}))}
    </div>
    
    <div class="section">
        <h2>üè™ –†—ã–Ω–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑</h2>
        {self._format_market_analysis(data.get('market_analysis', {}))}
    </div>
    
    <div class="section">
        <h2>üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</h2>
        {self._format_recommendations(data.get('market_analysis', {}).get('recommendations', []))}
    </div>
</body>
</html>
        """
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º HTML —Ñ–∞–π–ª
        html_file = output_path / f"{company_name}_analysis.html"
        with open(html_file, 'w', encoding='utf-8') as f:
            f.write(html_content)
    
    def _format_website_metrics(self, website_data: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ —Å–∞–π—Ç–∞"""
        if not website_data:
            return "<p>–î–∞–Ω–Ω—ã–µ –æ —Å–∞–π—Ç–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã</p>"
        
        return f"""
        <div class="metric">
            <strong>–°–∞–π—Ç:</strong> {website_data.get('url', 'N/A')}<br>
            <strong>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</strong> {website_data.get('title', 'N/A')}<br>
            <strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> {website_data.get('description', 'N/A')}<br>
            <strong>–ü—Ä–æ–¥—É–∫—Ç—ã:</strong> {len(website_data.get('products', []))} –Ω–∞–π–¥–µ–Ω–æ<br>
            <strong>–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:</strong> {', '.join(website_data.get('technologies', []))}
        </div>
        """
    
    def _format_social_metrics(self, social_data: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ —Å–æ—Ü—Å–µ—Ç–µ–π"""
        if not social_data:
            return "<p>–î–∞–Ω–Ω—ã–µ –æ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã</p>"
        
        summary = social_data.get('summary', {})
        return f"""
        <div class="metric">
            <strong>–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:</strong> {summary.get('total_followers', 0)}<br>
            <strong>–ù–∞–∏–±–æ–ª–µ–µ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞:</strong> {summary.get('most_active_platform', 'N/A')}<br>
            <strong>–ü–ª–∞—Ç—Ñ–æ—Ä–º—ã:</strong> {', '.join(social_data.get('platforms', {}).keys())}
        </div>
        """
    
    def _format_content_analysis(self, content_analysis: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        if not content_analysis:
            return "<p>–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</p>"
        
        topics = content_analysis.get('key_topics', [])
        sentiment = content_analysis.get('sentiment', {})
        
        return f"""
        <div class="metric">
            <strong>–ö–ª—é—á–µ–≤—ã–µ —Ç–µ–º—ã:</strong> {', '.join(topics[:5])}<br>
            <strong>–û–±—â–∞—è —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:</strong> {sentiment.get('overall_sentiment', 0):.2f}<br>
            <strong>–ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:</strong> {content_analysis.get('brand_positioning', {}).get('value_proposition', 'N/A')}
        </div>
        """
    
    def _format_market_analysis(self, market_analysis: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        if not market_analysis:
            return "<p>–†—ã–Ω–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</p>"
        
        position = market_analysis.get('market_position', {})
        competitors = market_analysis.get('competitors', [])
        
        competitors_html = ""
        for comp in competitors[:3]:
            competitors_html += f"<li><strong>{comp.get('name')}:</strong> {comp.get('market_share')} - {comp.get('strengths')}</li>"
        
        return f"""
        <div class="metric">
            <strong>–†—ã–Ω–æ—á–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è:</strong> {position.get('market_share', 'N/A')}<br>
            <strong>–°–µ–≥–º–µ–Ω—Ç:</strong> {position.get('market_segment', 'N/A')}<br>
            <strong>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã:</strong>
            <ul>{competitors_html}</ul>
        </div>
        """
    
    def _format_recommendations(self, recommendations: list) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
        if not recommendations:
            return "<p>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã</p>"
        
        rec_html = ""
        for i, rec in enumerate(recommendations, 1):
            rec_html += f'<div class="recommendation">{i}. {rec}</div>'
        
        return rec_html
    
    async def _generate_json_report(self, data: Dict, output_path: Path):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è JSON –æ—Ç—á–µ—Ç–∞ –¥–ª—è API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        
        json_file = output_path / f"{data.get('company', 'unknown')}_data.json"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        data['meta'] = {
            'generated_at': datetime.now().isoformat(),
            'version': '1.0',
            'format': 'competitor_analysis'
        }
        
        with open(json_file, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2, default=str)
    
    async def _generate_summary(self, data: Dict, output_path: Path):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—Ä–∞—Ç–∫–æ–≥–æ —Ä–µ–∑—é–º–µ"""
        company_name = data.get('company', 'Unknown')
        
        summary = f"""
# –ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ: {company_name}

## –ö–ª—é—á–µ–≤—ã–µ –Ω–∞—Ö–æ–¥–∫–∏:
- –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö: {data.get('social_data', {}).get('summary', {}).get('total_followers', 0)}
- –ü—Ä–æ–¥—É–∫—Ç–æ–≤ –Ω–∞ —Å–∞–π—Ç–µ: {len(data.get('website_data', {}).get('products', []))}
- –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏: {len(data.get('website_data', {}).get('technologies', []))}

## –ì–ª–∞–≤–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
"""
        
        recommendations = data.get('market_analysis', {}).get('recommendations', [])
        for i, rec in enumerate(recommendations[:3], 1):
            summary += f"{i}. {rec}\n"
        
        summary_file = output_path / f"{company_name}_summary.md"
        with open(summary_file, 'w', encoding='utf-8') as f:
            f.write(summary)
